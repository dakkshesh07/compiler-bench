name: Linux Kernel Compilation

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  workflow_dispatch:

jobs:
  build-x86:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/neutron-projects/docker-image:arch-neutron

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get Linux kernel version
        id: kernel
        run: echo "krel=$(curl -sL "https://www.kernel.org" | grep -A 1 "latest_link" | tail -n +2 | sed 's|.*">||' | sed 's|</a>||')" >> $GITHUB_OUTPUT

      - name: Prep
        run: |
          wget "https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-${{ steps.kernel.outputs.krel }}.tar.xz"
          tar xf "linux-${{ steps.kernel.outputs.krel }}.tar.xz"
          rm -rf "linux-${{ steps.kernel.outputs.krel }}.tar.xz"
      - name: Compile
        run: |
          source compiler.list
          for i in "${!compilers[@]}"; do   ${compilers[$i]}; done
          compiler_list="${compilers[0]}"
          cd $HOME
          cd "linux-${{ steps.kernel.outputs.krel }}"
          hyperfine -w 1 -r 3 -p '(sync; echo 3 | sudo tee /proc/sys/vm/drop_caches) && make distclean' \
            -L compiler ${compiler_list} 'PATH="$HOME/toolchains/{compiler}/bin:${PATH}" 
            LD_LIBRARY_PATH="$HOME/toolchains/{compiler}/lib" make distclean defconfig all -j$(nproc --all) LLVM="$HOME/toolchains/{compiler}/bin" LLVM_IAS=1' -c 'make distclean' \
            --export-json x86.json
        uses: actions/upload-artifact@v3
        with: x86-artifact
        path: ~/linux-${{ steps.kernel.outputs.krel }}/x86.json

  build-arm64:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/neutron-projects/docker-image:arch-neutron

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get Linux kernel version
        id: kernel
        run: echo "krel=$(curl -sL "https://www.kernel.org" | grep -A 1 "latest_link" | tail -n +2 | sed 's|.*">||' | sed 's|</a>||')" >> $GITHUB_OUTPUT

      - name: Prep
        run: |
          wget "https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-${{ steps.kernel.outputs.krel }}.tar.xz"
          tar xf "linux-${{ steps.kernel.outputs.krel }}.tar.xz"
          rm -rf "linux-${{ steps.kernel.outputs.krel }}.tar.xz"
      - name: Compile
        run: |
          source compiler.list
          for i in "${!compilers[@]}"; do   ${compilers[$i]}; done
          compiler_list="${compilers[0]}"
          cd $HOME
          cd "linux-${{ steps.kernel.outputs.krel }}"
          hyperfine -w 1 -r 3 -p '(sync; echo 3 | sudo tee /proc/sys/vm/drop_caches) && make distclean' \
            -L compiler ${compiler_list} 'PATH="$HOME/toolchains/{compiler}/bin:${PATH}" 
            LD_LIBRARY_PATH="$HOME/toolchains/{compiler}/lib" make distclean defconfig all -j$(nproc --all) ARCH=arm64 LLVM="$HOME/toolchains/{compiler}/bin" LLVM_IAS=1' -c 'make distclean' \
            --export-json arm64.json
        uses: actions/upload-artifact@v3
        with: arm64-artifact
        path: ~/linux-${{ steps.kernel.outputs.krel }}/arm64.json

  build-arm:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/neutron-projects/docker-image:arch-neutron

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get Linux kernel version
        id: kernel
        run: echo "krel=$(curl -sL "https://www.kernel.org" | grep -A 1 "latest_link" | tail -n +2 | sed 's|.*">||' | sed 's|</a>||')" >> $GITHUB_OUTPUT

      - name: Prep
        run: |
          cd $HOME
          wget "https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-${{ steps.kernel.outputs.krel }}.tar.xz"
          tar xf "linux-${{ steps.kernel.outputs.krel }}.tar.xz"
          rm -rf "linux-${{ steps.kernel.outputs.krel }}.tar.xz"
      - name: Compile
        run: |
          source compiler.list
          for i in "${!compilers[@]}"; do   ${compilers[$i]}; done
          compiler_list="${compilers[0]}"
          cd $HOME
          cd "linux-${{ steps.kernel.outputs.krel }}"
          hyperfine -w 1 -r 3 -p '(sync; echo 3 | sudo tee /proc/sys/vm/drop_caches) && make distclean' \
            -L compiler ${compiler_list} 'PATH="$HOME/toolchains/{compiler}/bin:${PATH}" 
            LD_LIBRARY_PATH="$HOME/toolchains/{compiler}/lib" make distclean defconfig all -j$(nproc --all) ARCH=arm LLVM="$HOME/toolchains/{compiler}/bin" LLVM_IAS=1' -c 'make distclean' \
            --export-json arm.json
        uses: actions/upload-artifact@v3
        with: arm-artifact
        path: ~/linux-${{ steps.kernel.outputs.krel }}/arm.json
